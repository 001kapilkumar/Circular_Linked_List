public class Deleting_Elements_Of_Linked_List_From_Begining {
    static class Node{
        int data ;
        Node next ;
        Node(int d ){
            data = d ;

        }
    }
    public Node head = null ;
    public Node tail = null ;
    int size = 0;
    public void add_Element(int data){
        Node newNode = new Node(data);
        if(head == null){
            head = newNode ;
            tail = newNode ;
        }
        else{
            tail.next = newNode ;
            tail = newNode ;
            tail.next = head ;
        }
        size++ ;
    }
    public void element_Dletion_From_Begining(){
      //  Node current = head ;
        if(head ==  null){
            System.out.println("Linked List is empty");
           // return ;
        }
        else{

                if(head != tail) {
                    // Node  temp = current.next ;
                    tail.next = head.next;

                    // current = current.next ;
                    head = head.next;
                }
                else{
                    head = null ;
                    tail = null ;

                }


            }


          // while(current != head);

    }
    public void element_Display(){
        Node current = head ;
        if(head == null){
            System.out.println("Linked List is empty");
        }

        else{
            do{
                System.out.println(current.data);
                current = current.next ;
            }
            while(current != head);
        }


    }
    public static void main(String [] args){
        Deleting_Elements_Of_Linked_List_From_Begining list = new Deleting_Elements_Of_Linked_List_From_Begining();
        list.add_Element(1);
        list.add_Element(2);
        list.add_Element(3);
        list.add_Element(4);
        System.out.println("Original element of Linked List be ");
        list.element_Display();
      //  Node current = list.head ;
        int i = 1 ;
        while(list.head != null) {

            System.out.println("Linked List after " + i +" delition");
            i++ ;
            list.element_Dletion_From_Begining();

            list.element_Display();
        }





    }
}
